{"version":3,"sources":["components/Navigation.js","components/SimpleBarChart.js","pages/Home.js","components/CardBarChart.js","components/StackedBarChart.js","pages/SRH.js","pages/GBV.js","pages/Visualize.js","pages/About.js","App.js","registerServiceWorker.js","index.js"],"names":["Navigation","className","Navbar","color","light","expand","NavbarBrand","Nav","navbar","NavItem","NavLink","href","React","Component","SimpleBarChart","ResponsiveContainer","width","height","BarChart","data","this","props","CartesianGrid","strokeDasharray","XAxis","dataKey","xAxisDatkey","YAxis","Tooltip","Legend","Bar","type","legendDatakey","fill","Home","loadData","bind","componentDidMount","state","SRH_iv_data","GBV_iv_data","dataIsReturned","fetch","response","json","setState","Container","fluid","Row","Col","sm","md","lg","CardBarChart","StackedBarChart","SRH","SRH_woe_data","SRH_woe_extreme_data","console","log","GBV","GBV_woe_data","GBV_woe_extreme_data","handleTextChange","handleImageChange","handleLinkChange","handleLanguageChange","handleTimeChange","handleSubmit","text","image","link","language","time","method","headers","body","JSON","stringify","event","target","value","e","preventDefault","Form","onSubmit","FormGroup","row","Label","for","Input","name","id","placeholder","onChange","style","Button","About","App","exact","path","render","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"uUAGqBA,E,uKAEjB,OACE,qBAAKC,UAAU,aAAf,SACE,eAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,KAAnC,UACE,cAACC,EAAA,EAAD,sBACA,eAACC,EAAA,EAAD,CAAKC,QAAM,EAACP,UAAU,UAAtB,UACE,cAACQ,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAASC,KAAK,IAAd,oBAEF,cAACF,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAASC,KAAK,OAAd,mBAEF,cAACF,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAASC,KAAK,OAAd,mBAEF,cAACF,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAASC,KAAK,aAAd,yBAEF,cAACF,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAASC,KAAK,SAAd,iC,GApB0BC,IAAMC,W,oJCSzBC,E,uKAEjB,OACE,cAACC,EAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAQ,IAA1C,SACE,eAACC,EAAA,EAAD,CAAUF,MAAO,IAAKC,OAAQ,IAAKE,KAAMC,KAAKC,MAAMF,KAApD,UACE,cAACG,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAASL,KAAKC,MAAMK,cAC3B,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CACEC,KAAK,WACLN,QAASL,KAAKC,MAAMW,cACpBC,KAAK,qB,GAb2BrB,IAAMC,WCR7BqB,E,kDACnB,aAAe,IAAD,8BACZ,gBAEKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBAEzB,EAAKE,MAAQ,CACXC,YAAa,GACbC,YAAa,GACbC,gBAAgB,GATN,E,yLAcWC,MAAM,S,cAAvBC,E,gBACaA,EAASC,O,OAAtBA,E,OACNxB,KAAKyB,SAAS,CACZN,YAAaK,EAAKL,YAClBC,YAAaI,EAAKJ,YAClBC,gBAAgB,I,0QAKZrB,KAAKe,W,OACXf,KAAKyB,SAAS,CAAEJ,gBAAgB,I,qIAIhC,OACE,8BACE,qBAAKxC,UAAU,eAAf,SACGmB,KAAKkB,MAAMG,eACV,eAACK,EAAA,EAAD,CAAWC,OAAO,EAAlB,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,qBAAKjD,UAAU,aAAf,6ZAYJ,eAAC+C,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAxB,UACE,2DACA,qBAAKnD,UAAU,iBAAf,SACE,cAAC,EAAD,CACEkB,KAAMC,KAAKkB,MAAMC,YACjBb,YAAY,UACZM,cAAc,YAIpB,eAACiB,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAxB,UACE,2DACA,qBAAKnD,UAAU,iBAAf,SACE,cAAC,EAAD,CACEkB,KAAMC,KAAKkB,MAAME,YACjBd,YAAY,UACZM,cAAc,eAMtB,cAACgB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,qBAAKjD,UAAU,aAAf,yeAcJ,a,GAxFoBY,aCQbwC,E,uKAEjB,OACE,cAACtC,EAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAQ,IAA1C,SACE,eAACC,EAAA,EAAD,CAAUF,MAAO,IAAKC,OAAQ,IAAKE,KAAMC,KAAKC,MAAMF,KAApD,UACE,cAACG,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,YACf,cAACE,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAKC,KAAK,WAAWN,QAAQ,MAAMQ,KAAK,qB,GAVRrB,IAAMC,WCA3ByC,E,uKAEjB,OACE,cAACvC,EAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAQ,IAA1C,SACE,eAACC,EAAA,EAAD,CAAUF,MAAO,IAAKC,OAAQ,IAAKE,KAAMC,KAAKC,MAAMF,KAApD,UACE,cAACG,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,YACf,cAACE,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAKL,QAAQ,UAAUQ,KAAK,YAC5B,cAACH,EAAA,EAAD,CAAKL,QAAQ,UAAUQ,KAAK,qB,GAXOrB,IAAMC,WCN9B0C,E,kDACnB,aAAe,IAAD,8BACZ,gBAEKpB,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBAEzB,EAAKE,MAAQ,CACXC,YAAa,GACbiB,aAAc,GACdf,gBAAgB,GATN,E,yLAcWC,MAAM,Q,cAAvBC,E,gBACaA,EAASC,O,OAAtBA,E,OACNxB,KAAKyB,SAAS,CACZN,YAAaK,EAAKL,YAClBiB,aAAcZ,EAAKY,aACnBC,qBAAsBb,EAAKa,qBAC3BhB,gBAAgB,I,0QAKZrB,KAAKe,W,OACXf,KAAKyB,SAAS,CAAEJ,gBAAgB,IAChCiB,QAAQC,IAAIvC,KAAKkB,MAAMmB,sB,qIAIvB,OACE,8BACE,qBAAKxD,UAAU,eAAf,SACGmB,KAAKkB,MAAMG,eACV,eAACK,EAAA,EAAD,CAAWC,OAAO,EAAlB,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,qBAAKjD,UAAU,aAAf,SACE,sEAIN,eAAC+C,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAxB,UACE,uDACA,qBAAKnD,UAAU,iBAAf,SACE,cAAC,EAAD,CACEkB,KAAMC,KAAKkB,MAAMC,YACjBb,YAAY,UACZM,cAAc,YAIpB,eAACiB,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAxB,UACE,wDACA,qBAAKnD,UAAU,iBAAf,SACE,cAAC,EAAD,CACEkB,KAAMC,KAAKkB,MAAMmB,qBACjB/B,YAAY,oBAMpB,cAACsB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,qBAAKjD,UAAU,aAAf,seAeJ,eAAC+C,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAvB,UACE,iCAAShC,KAAKkB,MAAMkB,aAAa,GAAxB,UACT,cAACR,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,sBAAKjD,UAAU,OAAf,UACE,cAAC,EAAD,CACEkB,KAAMC,KAAKkB,MAAMkB,aAAa,GAAxB,WAER,qBAAKvD,UAAU,OAAf,qQAWR,eAACgD,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAvB,UACE,iCAAShC,KAAKkB,MAAMkB,aAAa,GAAxB,UACT,cAACR,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,sBAAKjD,UAAU,OAAf,UACE,cAAC,EAAD,CACEkB,KAAMC,KAAKkB,MAAMkB,aAAa,GAAxB,WAER,qBAAKvD,UAAU,OAAf,oTAYR,eAACgD,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAvB,UACE,iCAAShC,KAAKkB,MAAMkB,aAAa,GAAxB,UACT,cAACR,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,sBAAKjD,UAAU,OAAf,UACE,cAAC,EAAD,CACEkB,KAAMC,KAAKkB,MAAMkB,aAAa,GAAxB,WAER,qBAAKvD,UAAU,OAAf,yNAaV,eAAC+C,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAvB,UACE,iCAAShC,KAAKkB,MAAMkB,aAAa,GAAxB,UACT,cAACR,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,sBAAKjD,UAAU,OAAf,UACE,cAAC,EAAD,CACEkB,KAAMC,KAAKkB,MAAMkB,aAAa,GAAxB,WAER,qBAAKvD,UAAU,OAAf,wQAWR,eAACgD,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAvB,UACE,iCAAShC,KAAKkB,MAAMkB,aAAa,GAAxB,UACT,cAACR,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,sBAAKjD,UAAU,OAAf,UACE,cAAC,EAAD,CACEkB,KAAMC,KAAKkB,MAAMkB,aAAa,GAAxB,WAER,qBAAKvD,UAAU,OAAf,8YAgBV,a,GA5LmBY,aCAZ+C,E,kDACnB,aAAe,IAAD,8BACZ,gBAEKzB,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBAEzB,EAAKE,MAAQ,CACXE,YAAa,GACbqB,aAAc,GACdC,qBAAsB,GACtBrB,gBAAgB,GAVN,E,yLAeWC,MAAM,Q,cAAvBC,E,gBACaA,EAASC,O,OAAtBA,E,OACNxB,KAAKyB,SAAS,CACZL,YAAaI,EAAKJ,YAClBqB,aAAcjB,EAAKiB,aACnBC,qBAAsBlB,EAAKkB,qBAC3BrB,gBAAgB,I,0QAKZrB,KAAKe,W,OACXf,KAAKyB,SAAS,CAAEJ,gBAAgB,I,qIAIhC,OACE,8BACE,qBAAKxC,UAAU,eAAf,SACGmB,KAAKkB,MAAMG,eACV,eAACK,EAAA,EAAD,CAAWC,OAAO,EAAlB,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,qBAAKjD,UAAU,aAAf,SACE,iEAIN,eAAC+C,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAxB,UACE,uDACA,qBAAKnD,UAAU,iBAAf,SACE,cAAC,EAAD,CACEkB,KAAMC,KAAKkB,MAAME,YACjBd,YAAY,UACZM,cAAc,YAIpB,eAACiB,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAxB,UACE,wDACA,qBAAKnD,UAAU,iBAAf,SACE,cAAC,EAAD,CACEkB,KAAMC,KAAKkB,MAAMwB,qBACjBpC,YAAY,oBAMpB,cAACsB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,qBAAKjD,UAAU,aAAf,seAeJ,eAAC+C,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAvB,UACE,iCAAShC,KAAKkB,MAAMuB,aAAa,GAAxB,UACT,cAACb,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,sBAAKjD,UAAU,OAAf,UACE,cAAC,EAAD,CACEkB,KAAMC,KAAKkB,MAAMuB,aAAa,GAAxB,WAER,qBAAK5D,UAAU,OAAf,qQAWR,eAACgD,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAvB,UACE,iCAAShC,KAAKkB,MAAMuB,aAAa,GAAxB,UACT,cAACb,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,sBAAKjD,UAAU,OAAf,UACE,cAAC,EAAD,CACEkB,KAAMC,KAAKkB,MAAMuB,aAAa,GAAxB,WAER,qBAAK5D,UAAU,OAAf,oTAYR,eAACgD,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAvB,UACE,iCAAShC,KAAKkB,MAAMuB,aAAa,GAAxB,UACT,cAACb,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,sBAAKjD,UAAU,OAAf,UACE,cAAC,EAAD,CACEkB,KAAMC,KAAKkB,MAAMuB,aAAa,GAAxB,WAER,qBAAK5D,UAAU,OAAf,yNAaV,eAAC+C,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAvB,UACE,iCAAShC,KAAKkB,MAAMuB,aAAa,GAAxB,UACT,cAACb,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,sBAAKjD,UAAU,OAAf,UACE,cAAC,EAAD,CACEkB,KAAMC,KAAKkB,MAAMuB,aAAa,GAAxB,WAER,qBAAK5D,UAAU,OAAf,wQAWR,eAACgD,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAvB,UACE,iCAAShC,KAAKkB,MAAMuB,aAAa,GAAxB,UACT,cAACb,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,sBAAKjD,UAAU,OAAf,UACE,cAAC,EAAD,CACEkB,KAAMC,KAAKkB,MAAMuB,aAAa,GAAxB,WAER,qBAAK5D,UAAU,OAAf,8UAeV,a,GA3LmBY,a,6CCDZqB,E,kDACnB,aAAe,IAAD,8BACZ,gBAEKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAK2B,iBAAmB,EAAKA,iBAAiB3B,KAAtB,gBACxB,EAAK4B,kBAAoB,EAAKA,kBAAkB5B,KAAvB,gBACzB,EAAK6B,iBAAmB,EAAKA,iBAAiB7B,KAAtB,gBACxB,EAAK8B,qBAAuB,EAAKA,qBAAqB9B,KAA1B,gBAC5B,EAAK+B,iBAAmB,EAAKA,iBAAiB/B,KAAtB,gBACxB,EAAKgC,aAAe,EAAKA,aAAahC,KAAlB,gBAEpB,EAAKE,MAAQ,CACX+B,KAAM,GACNC,MAAO,WACPC,KAAM,UACNC,SAAU,KACVC,KAAM,aACNlC,YAAa,KACbiB,aAAc,KACdhB,YAAa,KACbqB,aAAc,MApBJ,E,yLAyBWnB,MAAM,QAAS,CACpCgC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnBT,KAAMjD,KAAKkB,MAAM+B,KACjBC,MAAOlD,KAAKkB,MAAMgC,MAClBC,KAAMnD,KAAKkB,MAAMiC,KACjBC,SAAUpD,KAAKkB,MAAMkC,SACrBC,KAAMrD,KAAKkB,MAAMmC,S,cARf9B,E,gBAWaA,EAASC,O,OAAtBA,E,OACNxB,KAAKyB,SAAS,CACZN,YAAaK,EAAKL,YAClBiB,aAAcZ,EAAKY,aACnBhB,YAAaI,EAAKJ,YAClBqB,aAAcjB,EAAKiB,e,6IAINkB,GACf3D,KAAKyB,SAAS,CAAEwB,KAAMU,EAAMC,OAAOC,U,wCAGnBF,GAChB3D,KAAKyB,SAAS,CAAEyB,MAAOS,EAAMC,OAAOC,U,uCAGrBF,GACf3D,KAAKyB,SAAS,CAAE0B,KAAMQ,EAAMC,OAAOC,U,2CAGhBF,GACnB3D,KAAKyB,SAAS,CAAE2B,SAAUO,EAAMC,OAAOC,U,uCAGxBF,GACf3D,KAAKyB,SAAS,CAAE4B,KAAMM,EAAMC,OAAOC,U,4EAGlBC,G,wEACjBA,EAAEC,iB,SACI/D,KAAKe,W,sIAIX,OACE,8BACE,qBAAKlC,UAAU,eAAf,SACE,eAAC6C,EAAA,EAAD,CAAWC,OAAO,EAAlB,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,qBAAKjD,UAAU,aAAf,SACE,eAACmF,EAAA,EAAD,CAAMC,SAAUjE,KAAKgD,aAArB,UACE,eAACkB,EAAA,EAAD,CAAWC,KAAG,EAAd,UACE,cAACC,EAAA,EAAD,CAAOC,IAAI,WAAX,uBAEA,cAACC,EAAA,EAAD,CACE3D,KAAK,WACL4D,KAAK,OACLC,GAAG,WACHC,YAAY,wCACZC,SAAU1E,KAAK2C,iBACfgC,MAAO,CAAE9E,OAAQ,UAGrB,eAACqE,EAAA,EAAD,CAAWC,KAAG,EAAd,UACE,cAACC,EAAA,EAAD,CAAOC,IAAI,gBAAgBvC,GAAI,EAA/B,mBAGA,cAACD,EAAA,EAAD,CAAKC,GAAI,GAAT,SACE,eAACwC,EAAA,EAAD,CACE3D,KAAK,SACL4D,KAAK,QACLC,GAAG,QACHE,SAAU1E,KAAK4C,kBAJjB,UAME,8CACA,uDAIN,eAACsB,EAAA,EAAD,CAAWC,KAAG,EAAd,UACE,cAACC,EAAA,EAAD,CAAOC,IAAI,gBAAgBvC,GAAI,EAA/B,kBAGA,cAACD,EAAA,EAAD,CAAKC,GAAI,GAAT,SACE,eAACwC,EAAA,EAAD,CACE3D,KAAK,SACL4D,KAAK,OACLC,GAAG,OACHE,SAAU1E,KAAK6C,iBAJjB,UAME,6CACA,sDAIN,eAACqB,EAAA,EAAD,CAAWC,KAAG,EAAd,UACE,cAACC,EAAA,EAAD,CAAOC,IAAI,gBAAgBvC,GAAI,EAA/B,sBAGA,cAACD,EAAA,EAAD,CAAKC,GAAI,GAAT,SACE,eAACwC,EAAA,EAAD,CACE3D,KAAK,SACL4D,KAAK,WACLC,GAAG,WACHE,SAAU1E,KAAK8C,qBAJjB,UAME,wCACA,gDAIN,eAACoB,EAAA,EAAD,CAAWC,KAAG,EAAd,UACE,cAACC,EAAA,EAAD,CAAOC,IAAI,gBAAgBvC,GAAI,EAA/B,kBAGA,cAACD,EAAA,EAAD,CAAKC,GAAI,GAAT,SACE,eAACwC,EAAA,EAAD,CACE3D,KAAK,SACL4D,KAAK,OACLC,GAAG,OACHE,SAAU1E,KAAK+C,iBAJjB,UAME,gDACA,mDACA,6CACA,0CACA,yCACA,mDAIN,cAAC6B,EAAA,EAAD,CAAQjE,KAAK,SAAS5B,MAAM,UAA5B,gCAQmB,MAA1BiB,KAAKkB,MAAMC,YACV,gCACE,yCACA,eAACS,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAxB,UACE,uDACA,qBAAKnD,UAAU,iBAAf,SACE,cAAC,EAAD,CACEkB,KAAMC,KAAKkB,MAAMC,YACjBb,YAAY,UACZM,cAAc,YAKpB,eAACiB,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAxB,UACE,yDACA,qBAAKnD,UAAU,iBAAf,SACE,cAAC,EAAD,CACEkB,KAAMC,KAAKkB,MAAMkB,aACjB9B,YAAY,UACZM,cAAc,gBAMtB,cAACgB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,qBAAKjD,UAAU,aAAf,yeAcJ,KAEuB,MAA1BmB,KAAKkB,MAAME,YACV,gCACE,yCACA,eAACQ,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAxB,UACE,uDACA,qBAAKnD,UAAU,iBAAf,SACE,cAAC,EAAD,CACEkB,KAAMC,KAAKkB,MAAME,YACjBd,YAAY,UACZM,cAAc,YAKpB,eAACiB,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,IAAxB,UACE,yDACA,qBAAKnD,UAAU,iBAAf,SACE,cAAC,EAAD,CACEkB,KAAMC,KAAKkB,MAAMuB,aACjBnC,YAAY,UACZM,cAAc,gBAMtB,cAACgB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,qBAAKjD,UAAU,aAAf,yeAcJ,gB,GAhQkBY,aCYnBoF,EAfD,SAAC5E,GACb,OACE,qBAAKpB,UAAU,eAAf,SACE,qBAAKA,UAAU,aAAf,4ZCuBSiG,E,uKAhBX,OACE,sBAAKjG,UAAU,UAAf,UACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOkG,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAChF,GAAD,OAAW,cAAC,EAAD,eAAUA,OACnD,cAAC,IAAD,CAAO8E,OAAK,EAACC,KAAK,QAAQC,OAAQ,SAAChF,GAAD,OAAW,cAAC,EAAD,eAAUA,OACvD,cAAC,IAAD,CAAO8E,OAAK,EAACC,KAAK,OAAOC,OAAQ,SAAChF,GAAD,OAAW,cAAC,EAAD,eAASA,OACvD,cAAC,IAAD,CAAO8E,OAAK,EAACC,KAAK,OAAOC,OAAQ,SAAChF,GAAD,OAAW,cAAC,EAAD,eAASA,OACnD,cAAC,IAAD,CAAO8E,OAAK,EAACC,KAAK,aAAaC,OAAQ,SAAChF,GAAD,OAAW,cAAC,EAAD,eAAeA,OACjE,cAAC,IAAD,CAAO8E,OAAK,EAACC,KAAK,SAASC,OAAQ,SAAChF,GAAD,OAAW,cAAC,EAAD,eAAWA,iB,GAXjDR,aCAZyF,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9E,QACfwE,UAAUC,cAAcQ,WAK1B7D,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrB6D,OAAM,SAAAC,GACL/D,QAAQ+D,MAAM,4CAA6CA,MCvEjEC,IAASrB,OACR,cAAC,IAAD,UACE,cAAC,EAAD,MAEAsB,SAASC,eAAe,SDQZ,WACb,GAA6C,kBAAmBd,UAAW,CAGzE,GADkB,IAAIe,IAAIC,WAAwBtB,OAAOC,UAC3CsB,SAAWvB,OAAOC,SAASsB,OAIvC,OAGFvB,OAAOwB,iBAAiB,QAAQ,WAC9B,IAAMnB,EAAK,UAAMiB,WAAN,sBAEPxB,IAiDV,SAAiCO,GAE/BnE,MAAMmE,GACHI,MAAK,SAAAtE,GAGkB,MAApBA,EAASsF,SACuD,IAAhEtF,EAASgC,QAAQuD,IAAI,gBAAgBC,QAAQ,cAG7CrB,UAAUC,cAAcqB,MAAMnB,MAAK,SAAAC,GACjCA,EAAamB,aAAapB,MAAK,WAC7BT,OAAOC,SAAS6B,eAKpB1B,EAAgBC,MAGnBW,OAAM,WACL9D,QAAQC,IACN,oEArEA4E,CAAwB1B,GAIxBC,UAAUC,cAAcqB,MAAMnB,MAAK,WACjCvD,QAAQC,IACN,gHAMJiD,EAAgBC,OCnCxB2B,K","file":"static/js/main.7b245ba3.chunk.js","sourcesContent":["import React from \"react\";\nimport { Navbar, NavbarBrand, Nav, NavItem, NavLink } from \"reactstrap\";\n\nexport default class Navigation extends React.Component {\n  render() {\n    return (\n      <div className=\"App-header\">\n        <Navbar color=\"faded\" light expand=\"md\">\n          <NavbarBrand>GBV-SRH</NavbarBrand>\n          <Nav navbar className=\"ml-auto\">\n            <NavItem>\n              <NavLink href=\"/\">Home</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"/SRH\">SRH</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"/GBV\">GBV</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"/visualize\">Visualize</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"/about\">About</NavLink>\n            </NavItem>\n          </Nav>\n        </Navbar>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport {\n  ResponsiveContainer,\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n} from \"recharts\";\n\nexport default class SimpleBarChart extends React.Component {\n  render() {\n    return (\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <BarChart width={730} height={250} data={this.props.data}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey={this.props.xAxisDatkey} />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar\n            type=\"monotone\"\n            dataKey={this.props.legendDatakey}\n            fill=\"#0336FF\"\n          />\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport SimpleBarChart from \"../components/SimpleBarChart\";\n\nexport default class Home extends Component {\n  constructor() {\n    super();\n\n    this.loadData = this.loadData.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n\n    this.state = {\n      SRH_iv_data: [],\n      GBV_iv_data: [],\n      dataIsReturned: false,\n    };\n  }\n\n  async loadData() {\n    const response = await fetch(\"/home\");\n    const json = await response.json();\n    this.setState({\n      SRH_iv_data: json.SRH_iv_data,\n      GBV_iv_data: json.GBV_iv_data,\n      dataIsReturned: false,\n    });\n  }\n\n  async componentDidMount() {\n    await this.loadData();\n    this.setState({ dataIsReturned: true });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"main-content\">\n          {this.state.dataIsReturned ? (\n            <Container fluid={true}>\n              <Row>\n                <Col sm=\"12\">\n                  <div className=\"card intro\">\n                    This is a feature visualization tool for digital content\n                    related to the topics of SRH and GBV. This tool includes\n                    data from different digital platforms(social media accounts,\n                    groups, pages, facebook, twitter, websites both developed\n                    locally and internationally) with a core focus on SRH & GBV.\n                    This visualization tool visualizes the features that\n                    determine the importance of SRH and GBV content.\n                  </div>\n                </Col>\n              </Row>\n\n              <Row>\n                <Col sm=\"12\" md=\"12\" lg=\"6\">\n                  <strong>SRH Information Value</strong>\n                  <div className=\"card linechart\">\n                    <SimpleBarChart\n                      data={this.state.SRH_iv_data}\n                      xAxisDatkey=\"feature\"\n                      legendDatakey=\"iv\"\n                    />\n                  </div>\n                </Col>\n                <Col sm=\"12\" md=\"12\" lg=\"6\">\n                  <strong>GBV Information Value</strong>\n                  <div className=\"card linechart\">\n                    <SimpleBarChart\n                      data={this.state.GBV_iv_data}\n                      xAxisDatkey=\"feature\"\n                      legendDatakey=\"iv\"\n                    />\n                  </div>\n                </Col>\n              </Row>\n\n              <Row>\n                <Col sm=\"12\">\n                  <div className=\"card intro\">\n                    Information Value gives a measure of how the feature\n                    sub-topics is good in distinguishing between a good and bad\n                    post. The weight of evidence measures the predictive power\n                    of an individual features in relation to the dependent\n                    variable. Based on the graph equality based contents such as\n                    equality, court, justice, society, and our voice are good in\n                    distinguish contents. And gender based contents such as\n                    gender, girl, women, and female are bad in distinguish\n                    contents\n                  </div>\n                </Col>\n              </Row>\n            </Container>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport {\n  ResponsiveContainer,\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar\n} from \"recharts\";\n\nexport default class CardBarChart extends React.Component {\n  render() {\n    return (\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <BarChart width={730} height={250} data={this.props.data}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"content\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar type=\"monotone\" dataKey=\"woe\" fill=\"#0336FF\" />\n          {/* <Bar type=\"monotone\" dataKey=\"woe\" fill=\"#49e8c2\" /> */}\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  }\n}\n","import React from \"react\";\nimport {\n  ResponsiveContainer,\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n} from \"recharts\";\n\nexport default class StackedBarChart extends React.Component {\n  render() {\n    return (\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <BarChart width={730} height={250} data={this.props.data}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"feature\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar dataKey=\"max_woe\" fill=\"#0336FF\" />\n          <Bar dataKey=\"min_woe\" fill=\"#72A1FF\" />\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport SimpleBarChart from \"../components/SimpleBarChart\";\nimport CardBarChart from \"../components/CardBarChart\";\nimport StackedBarChart from \"../components/StackedBarChart\";\n\nexport default class SRH extends Component {\n  constructor() {\n    super();\n\n    this.loadData = this.loadData.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n\n    this.state = {\n      SRH_iv_data: [],\n      SRH_woe_data: [],\n      dataIsReturned: false,\n    };\n  }\n\n  async loadData() {\n    const response = await fetch(\"/SRH\");\n    const json = await response.json();\n    this.setState({\n      SRH_iv_data: json.SRH_iv_data,\n      SRH_woe_data: json.SRH_woe_data,\n      SRH_woe_extreme_data: json.SRH_woe_extreme_data,\n      dataIsReturned: false,\n    });\n  }\n\n  async componentDidMount() {\n    await this.loadData();\n    this.setState({ dataIsReturned: true });\n    console.log(this.state.SRH_woe_extreme_data);\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"main-content\">\n          {this.state.dataIsReturned ? (\n            <Container fluid={true}>\n              <Row>\n                <Col sm=\"12\">\n                  <div className=\"card intro\">\n                    <strong>Sexual Reproductive Health</strong>\n                  </div>\n                </Col>\n              </Row>\n              <Row>\n                <Col sm=\"12\" md=\"12\" lg=\"6\">\n                  <strong>Information Value</strong>\n                  <div className=\"card linechart\">\n                    <SimpleBarChart\n                      data={this.state.SRH_iv_data}\n                      xAxisDatkey=\"feature\"\n                      legendDatakey=\"iv\"\n                    />\n                  </div>\n                </Col>\n                <Col sm=\"12\" md=\"12\" lg=\"6\">\n                  <strong>Weight of Evidence</strong>\n                  <div className=\"card linechart\">\n                    <StackedBarChart\n                      data={this.state.SRH_woe_extreme_data}\n                      xAxisDatkey=\"feature\"\n                    />\n                  </div>\n                </Col>\n              </Row>\n\n              <Row>\n                <Col sm=\"12\">\n                  <div className=\"card intro\">\n                    Information Value gives a measure of how the feature\n                    sub-topics is good in distinguishing between a good and bad\n                    post. The weight of evidence measures the predictive power\n                    of an individual features in relation to the dependent\n                    variable. Based on the graph equality based contents such as\n                    equality, court, justice, society, and our voice are good in\n                    distinguish contents. And gender based contents such as\n                    gender, girl, women, and female are bad in distinguish\n                    contents\n                  </div>\n                </Col>\n              </Row>\n\n              {/* display content size, image, and link rows */}\n              <Row>\n                <Col sm=\"12\" md=\"6\" lg=\"4\">\n                  <strong>{this.state.SRH_woe_data[0][\"feature\"]}</strong>\n                  <Row>\n                    <Col sm=\"12\">\n                      <div className=\"card\">\n                        <CardBarChart\n                          data={this.state.SRH_woe_data[0][\"contents\"]}\n                        />\n                        <div className=\"card\">\n                          Content size is very weak at distinguishing between\n                          bad and good posts. A longer post that has greater\n                          than 600 characters or 100 words has more likes,\n                          comments, and shares than a short post that has less\n                          than 300 characters or 50 words.\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </Col>\n                <Col sm=\"12\" md=\"6\" lg=\"4\">\n                  <strong>{this.state.SRH_woe_data[1][\"feature\"]}</strong>\n                  <Row>\n                    <Col sm=\"12\">\n                      <div className=\"card\">\n                        <CardBarChart\n                          data={this.state.SRH_woe_data[1][\"contents\"]}\n                        />\n                        <div className=\"card\">\n                          Images are suspicious or too good to distinguish\n                          between good and bad posts. Based on the data a post\n                          that has an image has fewer likes, comments, and\n                          shares than a post with no image. This is because\n                          based on the scraped data most of the posts with an\n                          image have fewer text contents.\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </Col>\n                <Col sm=\"12\" md=\"6\" lg=\"4\">\n                  <strong>{this.state.SRH_woe_data[2][\"feature\"]}</strong>\n                  <Row>\n                    <Col sm=\"12\">\n                      <div className=\"card\">\n                        <CardBarChart\n                          data={this.state.SRH_woe_data[2][\"contents\"]}\n                        />\n                        <div className=\"card\">\n                          Links have very little information to distinguish\n                          between good and bad posts. Based on the data a post\n                          with a link has little bit higher likes, comments, and\n                          shares than a post with no link.\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </Col>\n              </Row>\n\n              {/* display language and time rows */}\n              <Row>\n                <Col sm=\"12\" md=\"6\" lg=\"4\">\n                  <strong>{this.state.SRH_woe_data[3][\"feature\"]}</strong>\n                  <Row>\n                    <Col sm=\"12\">\n                      <div className=\"card\">\n                        <CardBarChart\n                          data={this.state.SRH_woe_data[3][\"contents\"]}\n                        />\n                        <div className=\"card\">\n                          Language type which whether the post is in Amharic or\n                          English has very little information to distinguish\n                          between good and bad posts. Based on the data an\n                          English post has a little bit higher likes, comments,\n                          and shares than an Amharic post.\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </Col>\n                <Col sm=\"12\" md=\"6\" lg=\"4\">\n                  <strong>{this.state.SRH_woe_data[4][\"feature\"]}</strong>\n                  <Row>\n                    <Col sm=\"12\">\n                      <div className=\"card\">\n                        <CardBarChart\n                          data={this.state.SRH_woe_data[4][\"contents\"]}\n                        />\n                        <div className=\"card\">\n                          A time at which a post is posted has strong\n                          information at distinguishing between good and bad\n                          posts. Based on the data posts which have been posted\n                          early in the morning and at late night have higher\n                          likes, comments, and shares. And posts that have been\n                          posted in the morning, in the afternoon, in the\n                          evening, and at night have much fewer likes, comments,\n                          and shares.\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </Col>\n              </Row>\n            </Container>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport SimpleBarChart from \"../components/SimpleBarChart\";\nimport CardBarChart from \"../components/CardBarChart\";\nimport StackedBarChart from \"../components/StackedBarChart\";\n\nexport default class GBV extends Component {\n  constructor() {\n    super();\n\n    this.loadData = this.loadData.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n\n    this.state = {\n      GBV_iv_data: [],\n      GBV_woe_data: [],\n      GBV_woe_extreme_data: [],\n      dataIsReturned: false,\n    };\n  }\n\n  async loadData() {\n    const response = await fetch(\"/GBV\");\n    const json = await response.json();\n    this.setState({\n      GBV_iv_data: json.GBV_iv_data,\n      GBV_woe_data: json.GBV_woe_data,\n      GBV_woe_extreme_data: json.GBV_woe_extreme_data,\n      dataIsReturned: false,\n    });\n  }\n\n  async componentDidMount() {\n    await this.loadData();\n    this.setState({ dataIsReturned: true });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"main-content\">\n          {this.state.dataIsReturned ? (\n            <Container fluid={true}>\n              <Row>\n                <Col sm=\"12\">\n                  <div className=\"card intro\">\n                    <strong>Gender Based Violence</strong>\n                  </div>\n                </Col>\n              </Row>\n              <Row>\n                <Col sm=\"12\" md=\"12\" lg=\"6\">\n                  <strong>Information Value</strong>\n                  <div className=\"card linechart\">\n                    <SimpleBarChart\n                      data={this.state.GBV_iv_data}\n                      xAxisDatkey=\"feature\"\n                      legendDatakey=\"iv\"\n                    />\n                  </div>\n                </Col>\n                <Col sm=\"12\" md=\"12\" lg=\"6\">\n                  <strong>Weight of Evidence</strong>\n                  <div className=\"card linechart\">\n                    <StackedBarChart\n                      data={this.state.GBV_woe_extreme_data}\n                      xAxisDatkey=\"feature\"\n                    />\n                  </div>\n                </Col>\n              </Row>\n\n              <Row>\n                <Col sm=\"12\">\n                  <div className=\"card intro\">\n                    Information Value gives a measure of how the feature\n                    sub-topics is good in distinguishing between a good and bad\n                    post. The weight of evidence measures the predictive power\n                    of an individual features in relation to the dependent\n                    variable. Based on the graph equality based contents such as\n                    equality, court, justice, society, and our voice are good in\n                    distinguish contents. And gender based contents such as\n                    gender, girl, women, and female are bad in distinguish\n                    contents\n                  </div>\n                </Col>\n              </Row>\n\n              {/* display content size, image, and link rows */}\n              <Row>\n                <Col sm=\"12\" md=\"6\" lg=\"4\">\n                  <strong>{this.state.GBV_woe_data[0][\"feature\"]}</strong>\n                  <Row>\n                    <Col sm=\"12\">\n                      <div className=\"card\">\n                        <CardBarChart\n                          data={this.state.GBV_woe_data[0][\"contents\"]}\n                        />\n                        <div className=\"card\">\n                          Content size is very weak at distinguishing between\n                          bad and good posts. A longer post that has greater\n                          than 600 characters or 100 words has more likes,\n                          comments, and shares than a short post that has less\n                          than 300 characters or 50 words.\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </Col>\n                <Col sm=\"12\" md=\"6\" lg=\"4\">\n                  <strong>{this.state.GBV_woe_data[1][\"feature\"]}</strong>\n                  <Row>\n                    <Col sm=\"12\">\n                      <div className=\"card\">\n                        <CardBarChart\n                          data={this.state.GBV_woe_data[1][\"contents\"]}\n                        />\n                        <div className=\"card\">\n                          Images are suspicious or too good to distinguish\n                          between good and bad posts. Based on the data a post\n                          that has an image has fewer likes, comments, and\n                          shares than a post with no image. This is because\n                          based on the scraped data most of the posts with an\n                          image have fewer text contents.\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </Col>\n                <Col sm=\"12\" md=\"6\" lg=\"4\">\n                  <strong>{this.state.GBV_woe_data[2][\"feature\"]}</strong>\n                  <Row>\n                    <Col sm=\"12\">\n                      <div className=\"card\">\n                        <CardBarChart\n                          data={this.state.GBV_woe_data[2][\"contents\"]}\n                        />\n                        <div className=\"card\">\n                          Links have very little information to distinguish\n                          between good and bad posts. Based on the data a post\n                          with a link has little bit higher likes, comments, and\n                          shares than a post with no link.\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </Col>\n              </Row>\n\n              {/* display language and time rows */}\n              <Row>\n                <Col sm=\"12\" md=\"6\" lg=\"4\">\n                  <strong>{this.state.GBV_woe_data[3][\"feature\"]}</strong>\n                  <Row>\n                    <Col sm=\"12\">\n                      <div className=\"card\">\n                        <CardBarChart\n                          data={this.state.GBV_woe_data[3][\"contents\"]}\n                        />\n                        <div className=\"card\">\n                          Language type which whether the post is in Amharic or\n                          English has very little information to distinguish\n                          between good and bad posts. Based on the data an\n                          English post has a little bit higher likes, comments,\n                          and shares than an Amharic post.\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </Col>\n                <Col sm=\"12\" md=\"6\" lg=\"4\">\n                  <strong>{this.state.GBV_woe_data[4][\"feature\"]}</strong>\n                  <Row>\n                    <Col sm=\"12\">\n                      <div className=\"card\">\n                        <CardBarChart\n                          data={this.state.GBV_woe_data[4][\"contents\"]}\n                        />\n                        <div className=\"card\">\n                          A time at which a post is posted has strong\n                          information at distinguishing between good and bad\n                          posts. Based on the data posts which have been posted\n                          in the afternoon and at night have higher likes,\n                          comments, and shares than a posts that have been\n                          posted in the morning, in the evening, and at late\n                          night.\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </Col>\n              </Row>\n            </Container>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport SimpleBarChart from \"../components/SimpleBarChart\";\nimport { Button, Form, FormGroup, Input, Label } from \"reactstrap\";\n\nexport default class Home extends Component {\n  constructor() {\n    super();\n\n    this.loadData = this.loadData.bind(this);\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.handleImageChange = this.handleImageChange.bind(this);\n    this.handleLinkChange = this.handleLinkChange.bind(this);\n    this.handleLanguageChange = this.handleLanguageChange.bind(this);\n    this.handleTimeChange = this.handleTimeChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.state = {\n      text: \"\",\n      image: \"no_image\",\n      link: \"no_link\",\n      language: \"en\",\n      time: \"Late Night\",\n      SRH_iv_data: null,\n      SRH_woe_data: null,\n      GBV_iv_data: null,\n      GBV_woe_data: null,\n    };\n  }\n\n  async loadData() {\n    const response = await fetch(\"/post\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        text: this.state.text,\n        image: this.state.image,\n        link: this.state.link,\n        language: this.state.language,\n        time: this.state.time,\n      }),\n    });\n    const json = await response.json();\n    this.setState({\n      SRH_iv_data: json.SRH_iv_data,\n      SRH_woe_data: json.SRH_woe_data,\n      GBV_iv_data: json.GBV_iv_data,\n      GBV_woe_data: json.GBV_woe_data,\n    });\n  }\n\n  handleTextChange(event) {\n    this.setState({ text: event.target.value });\n  }\n\n  handleImageChange(event) {\n    this.setState({ image: event.target.value });\n  }\n\n  handleLinkChange(event) {\n    this.setState({ link: event.target.value });\n  }\n\n  handleLanguageChange(event) {\n    this.setState({ language: event.target.value });\n  }\n\n  handleTimeChange(event) {\n    this.setState({ time: event.target.value });\n  }\n\n  async handleSubmit(e) {\n    e.preventDefault();\n    await this.loadData();\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"main-content\">\n          <Container fluid={true}>\n            <Row>\n              <Col sm=\"12\">\n                <div className=\"card intro\">\n                  <Form onSubmit={this.handleSubmit}>\n                    <FormGroup row>\n                      <Label for=\"textArea\">Post Text</Label>\n\n                      <Input\n                        type=\"textarea\"\n                        name=\"text\"\n                        id=\"textArea\"\n                        placeholder=\"write or paste a text post to analyse\"\n                        onChange={this.handleTextChange}\n                        style={{ height: 200 }}\n                      />\n                    </FormGroup>\n                    <FormGroup row>\n                      <Label for=\"exampleSelect\" sm={2}>\n                        Image\n                      </Label>\n                      <Col sm={10}>\n                        <Input\n                          type=\"select\"\n                          name=\"image\"\n                          id=\"image\"\n                          onChange={this.handleImageChange}\n                        >\n                          <option>no_image</option>\n                          <option>has_image</option>\n                        </Input>\n                      </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                      <Label for=\"exampleSelect\" sm={2}>\n                        Link\n                      </Label>\n                      <Col sm={10}>\n                        <Input\n                          type=\"select\"\n                          name=\"link\"\n                          id=\"link\"\n                          onChange={this.handleLinkChange}\n                        >\n                          <option>no_link</option>\n                          <option>has_link</option>\n                        </Input>\n                      </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                      <Label for=\"exampleSelect\" sm={2}>\n                        Language\n                      </Label>\n                      <Col sm={10}>\n                        <Input\n                          type=\"select\"\n                          name=\"language\"\n                          id=\"language\"\n                          onChange={this.handleLanguageChange}\n                        >\n                          <option>en</option>\n                          <option>am</option>\n                        </Input>\n                      </Col>\n                    </FormGroup>\n                    <FormGroup row>\n                      <Label for=\"exampleSelect\" sm={2}>\n                        Time\n                      </Label>\n                      <Col sm={10}>\n                        <Input\n                          type=\"select\"\n                          name=\"time\"\n                          id=\"time\"\n                          onChange={this.handleTimeChange}\n                        >\n                          <option>Late Night</option>\n                          <option>Early Morning</option>\n                          <option>Morning</option>\n                          <option>Noon</option>\n                          <option>Eve</option>\n                          <option>Night</option>\n                        </Input>\n                      </Col>\n                    </FormGroup>\n                    <Button type=\"submit\" color=\"primary\">\n                      Visualize\n                    </Button>\n                  </Form>\n                </div>\n              </Col>\n            </Row>\n\n            {this.state.SRH_iv_data != null ? (\n              <div>\n                <strong>SRH</strong>\n                <Row>\n                  <Col sm=\"12\" md=\"12\" lg=\"6\">\n                    <strong>Information Value</strong>\n                    <div className=\"card linechart\">\n                      <SimpleBarChart\n                        data={this.state.SRH_iv_data}\n                        xAxisDatkey=\"feature\"\n                        legendDatakey=\"iv\"\n                      />\n                    </div>\n                  </Col>\n\n                  <Col sm=\"12\" md=\"12\" lg=\"6\">\n                    <strong>Weight of Evidences</strong>\n                    <div className=\"card linechart\">\n                      <SimpleBarChart\n                        data={this.state.SRH_woe_data}\n                        xAxisDatkey=\"content\"\n                        legendDatakey=\"woe\"\n                      />\n                    </div>\n                  </Col>\n                </Row>\n\n                <Row>\n                  <Col sm=\"12\">\n                    <div className=\"card intro\">\n                      Information Value gives a measure of how the feature\n                      sub-topics is good in distinguishing between a good and\n                      bad post. The weight of evidence measures the predictive\n                      power of an individual features in relation to the\n                      dependent variable. Based on the graph equality based\n                      contents such as equality, court, justice, society, and\n                      our voice are good in distinguish contents. And gender\n                      based contents such as gender, girl, women, and female are\n                      bad in distinguish contents\n                    </div>\n                  </Col>\n                </Row>\n              </div>\n            ) : null}\n\n            {this.state.GBV_iv_data != null ? (\n              <div>\n                <strong>GBV</strong>\n                <Row>\n                  <Col sm=\"12\" md=\"12\" lg=\"6\">\n                    <strong>Information Value</strong>\n                    <div className=\"card linechart\">\n                      <SimpleBarChart\n                        data={this.state.GBV_iv_data}\n                        xAxisDatkey=\"feature\"\n                        legendDatakey=\"iv\"\n                      />\n                    </div>\n                  </Col>\n\n                  <Col sm=\"12\" md=\"12\" lg=\"6\">\n                    <strong>Weight of Evidences</strong>\n                    <div className=\"card linechart\">\n                      <SimpleBarChart\n                        data={this.state.GBV_woe_data}\n                        xAxisDatkey=\"content\"\n                        legendDatakey=\"woe\"\n                      />\n                    </div>\n                  </Col>\n                </Row>\n\n                <Row>\n                  <Col sm=\"12\">\n                    <div className=\"card intro\">\n                      Information Value gives a measure of how the feature\n                      sub-topics is good in distinguishing between a good and\n                      bad post. The weight of evidence measures the predictive\n                      power of an individual features in relation to the\n                      dependent variable. Based on the graph equality based\n                      contents such as equality, court, justice, society, and\n                      our voice are good in distinguish contents. And gender\n                      based contents such as gender, girl, women, and female are\n                      bad in distinguish contents\n                    </div>\n                  </Col>\n                </Row>\n              </div>\n            ) : null}\n          </Container>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nconst About = (props) => {\n  return (\n    <div className=\"main-content\">\n      <div className=\"card intro\">\n        This is a feature visualization tool for digital content related to the\n        topics of SRH and GBV. This tool includes data from different digital\n        platforms(social media accounts, groups, pages, facebook, twitter,\n        websites both developed locally and internationally) with a core focus\n        on SRH & GBV. This visualization tool visualizes the features that\n        determine the importance of SRH and GBV content.\n      </div>\n    </div>\n  );\n};\n\nexport default About;\n","import React, { Component } from \"react\";\nimport Navigation from \"./components/Navigation\";\nimport \"./App.scss\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport SRH from \"./pages/SRH\";\nimport GBV from \"./pages/GBV\";\nimport Visualize from \"./pages/Visualize\";\nimport About from \"./pages/About\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <Navigation />\n        <Switch>\n          <Route exact path=\"/\" render={(props) => <Home {...props} />} />\n          <Route exact path=\"/home\" render={(props) => <Home {...props} />} />\n          <Route exact path=\"/SRH\" render={(props) => <SRH {...props} />} />\n\t\t      <Route exact path=\"/GBV\" render={(props) => <GBV {...props} />} />\n          <Route exact path=\"/visualize\" render={(props) => <Visualize {...props} />}/>\n          <Route exact path=\"/about\" render={(props) => <About {...props} />} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render((\n\t<Router>\n\t  <App />\n\t</Router>\n), document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}